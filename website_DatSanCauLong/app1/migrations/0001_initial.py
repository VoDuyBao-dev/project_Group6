# Generated by Django 5.1.4 on 2025-02-06 07:06

import app1.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BadmintonHall',
            fields=[
                ('badminton_hall_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('address', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlotTemplate',
            fields=[
                ('template_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('day_of_week', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=20)),
                ('time_frame', models.CharField(max_length=50)),
                ('fixed_price', models.DecimalField(decimal_places=3, max_digits=6)),
                ('daily_price', models.DecimalField(decimal_places=3, max_digits=6)),
                ('flexible_price', models.DecimalField(decimal_places=3, max_digits=6)),
                ('status', models.CharField(choices=[('available', 'Available'), ('unavailable', 'Unavailable')], default='available', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Court',
            fields=[
                ('court_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='app1/static/app1/images')),
                ('status', models.CharField(choices=[('under_maintenance', 'Under Maintenance'), ('empty', 'Empty'), ('booked', 'Booked')], default='available', max_length=20)),
                ('badminton_hall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courts', to='app1.badmintonhall')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('booking_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('booking_type', models.CharField(choices=[('fixed', 'Fixed'), ('daily', 'Daily'), ('flexible', 'Flexible')], max_length=20)),
                ('date', models.DateField()),
                ('start_time', models.TimeField(default='00:00:00')),
                ('end_time', models.TimeField(default='00:00:00')),
                ('status', models.BooleanField(default=False)),
                ('court_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='app1.court')),
                ('customer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='app1.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('payment_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.BooleanField(default=False)),
                ('booking_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='app1.booking')),
                ('customer_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='app1.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Revenue',
            fields=[
                ('revenue_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('total_revenue', models.DecimalField(decimal_places=2, max_digits=15)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('badminton_hall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revenue_reports', to='app1.badmintonhall')),
                ('payments', models.ManyToManyField(related_name='revenues', to='app1.payment')),
            ],
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('slot_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('court', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='app1.court')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='app1.timeslottemplate')),
            ],
        ),
        migrations.AddField(
            model_name='booking',
            name='slot_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='app1.slot'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('guest', 'Guest'), ('customer', 'Customer'), ('court_manager', 'Court Manager'), ('court_staff', 'Court Staff'), ('admin', 'System Admin')], default='guest', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, related_name='%(class)s_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='%(class)s_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SystemAdmin',
            fields=[
                ('system_admin_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='system_admin', to='app1.user')),
            ],
        ),
        migrations.AddField(
            model_name='customer',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer', to='app1.user'),
        ),
        migrations.CreateModel(
            name='CourtStaff',
            fields=[
                ('court_staff_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('court', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='court_staff', to='app1.court')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='court_staff', to='app1.user')),
            ],
        ),
        migrations.CreateModel(
            name='CourtManager',
            fields=[
                ('court_manager_id', models.CharField(default=app1.models.generate_short_id, editable=False, max_length=5, primary_key=True, serialize=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='court_manager', to='app1.user')),
            ],
        ),
    ]
